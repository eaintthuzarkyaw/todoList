customize string count
Laravel => Str::words($p['title'],20,'...');
Pure PHP => Substr($p['title'],0,20);

string ဆက်ချင် url('delete'.$item['title']) | route('delete',$item['title'])

( tempoary session message )
-----------------------------

( after button click function)

return back()->with([$data,'insert' => "success.."]);

@if (session('insertSuccess'))
    <div class="alert alert-success alert-dismissible fade show" role="alert">
 **       <strong>{{session('insertSuccess')}}</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
@endif


( user::all(), get(), first(), last() )
all() , get() => collection
first() ကရိုးရိုးတိုင်းယူလို့ရတယ်
last() က collection ဖြစ်ပြီးမှသုံးလို့ရမှာ
 user::get()->last()
 user::all()->last()


## random() => collection
$posts = Post::where('id', '<', 11)->get()->random();

where &&
orWhere ||

// $posts = Post::orderBy('created_at', 'desc')->paginate(3);
// $posts = Post::select("title")->first();
// $posts = Post::pluck("title");
// $posts = Post::select("title", "description")->get();
// $posts = Post::get()->last();
// $posts = Post::where('id', '<', 11)->get()->random();
// $posts = Post::orderBy('id', 'asc')->get();
// $posts = Post::whereBetween('id', [10, 40])->get();
// $posts = Post::whereBetween('id', [10, 20])->orderBy('id', 'desc')->get();
// $posts = Post::select('id', 'created_at')
    //     ->whereBetween('id', [10, 15])
    //     ->where('created_at', '2023-06-08T03:24:23.000000Z')
    //     ->orderBy('id', 'asc')
    //     ->get();



( For Pagination )
------------------
*** object format ( not array format ) ***

$posts = Post::orderBy('created_at', 'desc')->paginate(3);

{{ $posts->links() }}

for ui => provider->app service provider

public function boot(): void
    {
        // for Pagination ui | import Pagination/Paginator
        Paginator::useBootstrapFive();
    }


( Validation Rules )
---------------------
$Validation_rules = [
    'postTitle' => 'required',
    'postDescription' => 'required',
];

Validator::make($request->all(),$Validation_rules)->validate();


( error ထုတ်ပြချင်ရင် )
---------------------

class="form-control @error('title') is-invalid @enderror"

@error('title')
        <div class="invalid-feedback">
            {{ $message }}
        </div>
@enderror


( dataအဟောင်းကိုပြန်ရချင် value = "{{ old('postTitle') }}" )
( update လုပ်တဲ့ချိန် old data ပြန်ရချင် value = "{{ old('title', $post['title']) }}")
                                ရှေ့က update data ,နောက်က database ထဲက data


( unique => data ထပ်လို့ရင် error တတ်တာ )
-----------------------------------------

( unique:table_name,unique ဖြစ်ချင်တဲ့ column name )

$validation_rules = [
            'title' => 'required|min:5|max:100|unique:posts,title',
            'description' => 'required',
        ];

Validator::make($request->all(), $validation_rules)->validate();


( customize validation message )
---------------------------------
(title field မှာ required ဆိုတဲ့ error တတ်ခဲ့ရင် message ထုတ်ပြမယ် )

$validation_message = [
            'title.required' => 'Post Title ဖြည့်ရန်လိုအပ်ပါသည်။',
            'description.required' => 'Post Description ဖြည့်ရန်လိုအပ်ပါသည်။',
        ];
Validator::make($request->all(), $validation_rules,$validation_message)->validate();

( factory > seeder > DatabaseSeeder )

php artisan make:factory PostFactory
php artisan make:seeder PostSeeder

PostFactory.php =>

    public function definition(): array
    {
        // https://github.com/fzaninotto/Faker

        return [
            'title' => $this->faker->sentence(8),
            'description' => $this->faker->text(200),
        ];
    }

PostSeeder.php

    class PostSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        Post::factory()->count(30)->create();
    }
}


DatabaseSeeder.php

    class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->call([PostSeeder::class]);
    }
}


( သူ့ကိုယ်သူupdateလုပ်ရင် တူနေရင်လဲ pass ပေးမယ် တခြားသူဆို error message ပြန်မယ်)
 Validation Rulesမှာ $request->id ထည့်ပေးရင်ရပီ

 $validation_rules = [
            'title' => 'required|min:5|max:100|unique:posts,title,' . $request->id,
                                               -----------------***-----------------
            'description' => 'required',
        ];

( total(), links() => collection ဖြစ်မှယူသုံးလို့ရမှာ)
